"0","##############################################"
"0","# YOUR CODE HERE, fill in the blank space"
"0","##############################################"
"0",""
"0","######################################################################"
"0","#"
"0","# Params:"
"0","#  [0,T] - time horizon"
"0","#  beta - infection rate"
"0","#  gamma - recovery rate"
"0","#  rho - rate of (E -> I)"
"0","#  n - initial number of susceptibles."
"0","#  m - initial number of infectives, here m=1"
"0","#  three events: ""S->E"",""E->I"",""I->R"""
"0","######################################################################"
"0",""
"0",""
"0","stoch_SEIR <- function(T, n, m, parms, N) {"
"0","  beta0 <- parms[1]"
"0","  beta1 <- parms[2]"
"0","  t1 <- parms[3]"
"0","  w <- parms[4]"
"0","  gamma <- parms[5]"
"0","  rho <- parms[6]"
"0","  N <- parms[7]"
"0",""
"0","  # write the function for beta(t)"
"0","  beta <- function(t) {"
"0","    ifelse(t <= t1 - w, beta0, ifelse(t > t1 + w, beta1,"
"0","      beta0 + (beta1 - beta0) / (2 * w) * (t - (t1 - w))"
"0","    ))"
"0","  }"
"0","  # Initialize (x= number of S, y=number of I, z=number of E, t=event time)"
"0","  x <- n"
"0","  y <- m"
"0","  z <- 0"
"0","  time <- 0"
"0","  # Possible events:"
"0","  eventLevels <- c(""S->E"", ""E->I"", ""I->R"")"
"0","  # Initialize result"
"0","  df_SEIR <- data.frame(time = time, x = x, y = y, z = z, event = NA)"
"0","  # Loop until  time T or the epidemic stops(there is no infectives)"
"0","  while (time < T & (y > 0)) {"
"0","    # Draw the waiting type for each possible event"
"0","    b <- beta(time)"
"0","    wait <- rexp(3, c(""S->E"" = b / N * x * y, "
"0","                      ""E->I"" = rho * z, ""I->R"" = gamma * y))"
"0","    # Determine which event occurs first"
"0","    i <- which.min(wait)"
"0","    # Record Event Time"
"0","    time <- time + wait[i]"
"0","    # Update the number of S, I, E according to the event type"
"0","    if (eventLevels[i] == ""S->E"") {"
"0","      x <- x - 1"
"0","      z <- z + 1"
"0","    }"
"0","    if (eventLevels[i] == ""E->I"") {"
"0","      z <- z - 1"
"0","      y <- y + 1"
"0","    }"
"0","    if (eventLevels[i] == ""I->R"") {"
"0","      y <- y - 1"
"0","    }"
"0","    # Store result"
"0","    df_SEIR <- rbind(df_SEIR, c(time, x, y, z, i))"
"0","  }"
"0","  # Re-code event type and return"
"0","  df_SEIR$event <- factor(eventLevels[df_SEIR$event], levels = eventLevels)"
"0",""
"0","  return(df_SEIR)"
"0","}"
