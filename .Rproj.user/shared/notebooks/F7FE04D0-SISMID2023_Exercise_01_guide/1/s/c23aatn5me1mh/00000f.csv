"0","# total infected:"
"0","fsize_SIR <- function(T, beta, gamma, n, m, N) {"
"0","  # Initialize (x= number of S, y=number of I, z= y=number of R, t=event time)"
"0","  x <- n"
"0","  y <- m"
"0","  z <- 0"
"0","  t <- 0"
"0","  # size of population"
"0","  N <- n + m"
"0",""
"0","  # Possible events: Infection(S->I) and Removal(I->R)"
"0","  eventLevels <- c(""S->I"", ""I->R"")"
"0",""
"0","  # Loop until  time T or the epidemic stops(there is no infectives)"
"0","  while (t < T & (y > 0)) {"
"0","    ####################################################"
"0","    # YOUR CODE HERE,follow the codes in part d"
"0","    #############################################"
"0",""
"0","    # Draw the waiting type for each possible event"
"0","    wait <- rexp(2, c(""S->I"" = beta / N * x * y, ""I->R"" = gamma * y))"
"0","    # Determine which event occurs first"
"0","    i <- which.min(wait)"
"0","    # Record Event Time"
"0","    t <- t + wait[i]"
"0","    # Update the number of S and I according to the event type"
"0","    if (eventLevels[i] == ""S->I"") {"
"0","      x <- x - 1"
"0","      y <- y + 1"
"0","      z <- z + 1"
"0","    } # if infection"
"0","    if (eventLevels[i] == ""I->R"") {"
"0","      y <- y - 1"
"0","    } # if recovery"
"0","  }"
"0","  return(z) # return the number of recovered"
"0","}"
