"0","######################################################################"
"0","# Params:"
"0","#  [0,T] - time horizon"
"0","#  beta - infection rate"
"0","#  gamma - recovery rate"
"0","#  n - initial number of susceptibles."
"0","#  m - initial number of infectives"
"0","######################################################################"
"0",""
"0","stoch_SIR <- function(T, beta, gamma, n, m, N) {"
"0","  # Initialize (x= number of S, y=number of I, t=event time)"
"0","  x <- n"
"0","  y <- m"
"0","  z <- 1"
"0","  t <- 0"
"0","  N <- n + m"
"0","  # Possible events: Infection(S->I) and Removal(I->R)"
"0","  eventLevels <- c(""S->I"", ""I->R"")"
"0","  # Initialize result"
"0","  df_SIR <- data.frame(t = t, x = x, y = y, totalinfected = z, event = NA)"
"0","  # Loop until  time T or the epidemic stops(there is no infectives)"
"0","  while (t < T & (y > 0)) {"
"0","    ##############################################"
"0","    # YOUR CODE HERE, fill in the blank space"
"0","    ##############################################"
"0","    # Draw the waiting type for each possible event"
"0",""
"0","    wait <- rexp(2, c("
"0","      ""S->I"" = beta / N * x * y, # here insert the rate for ""S->I"""
"0","      ""I->R"" = gamma * y # the rate for ""I->R"""
"0","    ))"
"0","    """
"0","    From those two rates, we draw two exponential"
"0","    random numbers for each possible event"
"0","    """
"0",""
"0","    # Determine which event occurs first"
"0","    # i.e. the event with the smaller or bigger random number?"
"0","    # which.min(wait) or which.max(wait)?"
"0",""
"0","    i <- which.min(wait)"
"0",""
"0","    # Record Event Time"
"0","    t <- t + wait[i]"
"0",""
"0","    # Update the number of S and I according to the event type"
"0","    # if an infection occurs,"
"0","    if (eventLevels[i] == ""S->I"") {"
"0","      x <- x - 1  # the number of S will decrease by 1."
"0","      # what happen to y, z?"
"0","      y <- y + 1"
"0",""
"0","      z <- z + 1"
"0","    }"
"0","    # if an recovery occurs,"
"0","    if (eventLevels[i] == ""I->R"") {"
"0",""
"0","      # what happen to x, y, z?"
"0","      y <- y - 1"
"0","    }"
"0","    # Store result"
"0","    df_SIR <- rbind(df_SIR, c(t, x, y, z, i))"
"0","  }"
"0","  # Re-code event type and return"
"0","  df_SIR$event <- factor(eventLevels[df_SIR$event], levels = eventLevels)"
"0",""
"0","  return(df_SIR)"
"0","}"
