"0","##############################################"
"0","# YOUR CODE HERE, fill in the blank space"
"0","##############################################"
"0",""
"0","################################################################################"
"0","#"
"0","#  t - time"
"0","#  y - current state vector of the ODE at time t"
"0","#  parms - Parameter vector used by the ODE system"
"0","#"
"0","# Returns:"
"0","#  list containing dS(t)/dt, dE(t)/dt, and dI(t)/dt"
"0","################################################################################"
"0","seir_change <- function(t, y, parms, N) {"
"0","  beta0 <- parms[1]"
"0","  beta1 <- parms[2]"
"0","  t1 <- parms[3]"
"0","  w <- parms[4]"
"0","  rho <- 1 / 5"
"0","  gamma <- parms[5]"
"0","  N <- parms[6]"
"0",""
"0","  S <- y[1]"
"0","  E <- y[2]"
"0","  I <- y[3]"
"0",""
"0","  # write the time-dependent rate \beta(t) using ifelse(,)"
"0",""
"0","  beta <- function(t) {"
"0","    ifelse(t <= t1 - w, beta0, ifelse(t > t1 + w, beta1,"
"0","      beta0 + (beta1 - beta0) / (2 * w) * (t - (t1 - w))"
"0","    ))"
"0","  }"
"0","  # write the return list containing dS(t)/dt, dE(t)/dt, and dI(t)/dt"
"0","  return(list(c(S = -beta(t) / N * S * I, E = beta(t) / N * S * I - rho * E, "
"0","                I = rho * E - gamma * I)))"
"0","}"
"0","# plot \beta(t):"
"0","# plot(time, b, type=""l"",xlab=""Time"",ylab=""beta(t)"")"
"0","# title(""Plot of beta(t)"")"
