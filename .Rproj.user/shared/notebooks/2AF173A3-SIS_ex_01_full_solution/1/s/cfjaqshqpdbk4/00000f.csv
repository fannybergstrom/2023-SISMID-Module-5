"0","##############################################"
"0","# YOUR CODE HERE, fill in the blank space"
"0","##############################################"
"0","# do the same way as for SIR model, but with four states: S E I R"
"0",""
"0","##############################################################################"
"0","# Function to compute the derivative of the ODE system for SEIR Model"
"0","#"
"0","#  t - time"
"0","#  y - current state vector of the ODE at time t"
"0","#  parms - Parameter vector used by the ODE system"
"0","#"
"0","# Returns:"
"0","#  list containing dS(t)/dt, dE(t)/dt, and dI(t)/dt"
"0","##############################################################################"
"0",""
"0","seir <- function(t, y, parms, N) {"
"0","  beta <- parms[1]"
"0","  rho <- parms[2]"
"0","  gamma <- parms[3]"
"0","  N <- parms[4]"
"0",""
"0","  S <- y[1]"
"0","  E <- y[2]"
"0","  I <- y[3]"
"0","  return(list(c(S = -beta / N * S * I, E = beta / N * S * I - rho * E, "
"0","                I = rho * E - gamma * I)))"
"0","}"
"0",""
"0",""
"0","# Parameter Values:"
"0","times <- seq(0, 100, length = 1000)"
"0","gamma <- 1 / 7"
"0","beta <- 0.4"
"0","rho <- 1 / 5"
"0","I0 <- 1"
"0","N <- 100"
"0",""
"0","# Solve the ODE and plot"
"0","sol_seir <- lsoda("
"0","  y = c(N - I0, 0, I0), # insert the corresponding initial conditions"
"0","  times = times,"
"0","  func = seir,"
"0","  parms = c(beta, rho, gamma, N)"
"0",")"
"0",""
"0","plot(times, sol_seir[, 2],"
"0","  type = ""l"", lwd = 2, col = 1, xlab = ""Time"","
"0","  ylab = """", xlim = c(0, 100), ylim = c(0, N)"
"0",")"
